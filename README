PIUS: The PGP Individual UID Signer

INTRODUCTION

PIUS started life as a group of bad shell scripts I had thrown together through
the years after going to various PGP keysigning parties. These scripts
automated various bits and pieces of signing various keys and UIDs, but feel
short of actually making it a mostly painless process.

Finally I decided to sit down and combine all these shell scripts into a single
unified utility to make signing individual UIDs on a multitude of keys as
painless as possible. Since this was going to be mostly forking off gpg
instances, it seemed like shell was the way to go. However, after dealing with
gpg and it's "API" for a while, I quickly realized that was not going to be the
best course of action. Since I wanted an excuse to write more python, instead
of my usual perl, I decided to write this in python.

The original version heavily used the pexpect module for various reasons: (1) I
wanted to be able to let the user enter the passphrase directly into gpg for
security reasons, (2) Using the --{command,passphrase,status}-fd options turned
not to be not  that well documented and not work the way the documentation
suggested.

This method quickly showed itself to be very fragile. So, Imanaged to bend gpg
to my will without using pexpect, and the only thing left that uses pexpect is
the 'interactive' mode, which will probably one day go away if gpg-agent
becomes reliable enough.


USAGE

The simplest use form is
  $ pius -e -s <your_keyid> <keyid>

This will sign all UIDs on <keyid>, and export one copy of the for each UID
with only that UID signed. These keys are exported into a file in /tmp named
<keyid>__<id>.asc, where id is usually an email address if we can extract one,
otherwise some other piece of the UID. The '-e' flag is what turns on the
encryption of the outfiles, and the '-s' flag denotes the "signing" keyid. This
default mode uses the pexpect mode to drop you into gpg at the right time so
you can enter your passphrase directly into it. This means in this mode you
will be prompted once for every UID on every key you sign. This mode will go
away eventually.

There are two other modes which you can enter by using -p or -a. The -p option
causes PIUS to prompt for your passpharse at startup and feed it to gpg when
needed. The passphrase is only stored in memory, but since we don't require
root (or setuid) we don't lock memory. This may raise security issues if there
are untrusted individuals on the system (but for single user desktops shouldn't
be an issue). The -a mode will attempt to use gpg-agent. This is the most
secure and convenient method, but sometimes gpg-agent can be flaky.

After a keysigning party you probably have a party keyring provided by the
organizer and want to sign most of the keys on it. In this case, don't specify
the all the keyids to sign. You probably also want to automatically send off
emails with the encrypted signatures to all of the UIDs that you verify. In
that case you want:
  $ pius -A -e -m <your_email> -r </path/to/keyring.gpg> -s <your_keyid>

The -r flag specifies a keyring to use, and the -A flag says to sign all keyids
on that keyring. Since you are prompted to verify each fingerprint, you can say
no to any people on the ring you were unable to verify. The -e flag says to
encrypt the exported keyfile and the -m flag says to email it using the
provided address as the From.

There are a variety of other options that you may want:
  * customize the tmpdir and outdir directories (-t and -o respectively)
  * select the signing level (-l)
  * import the unsigned keys to the default keyring (-i)
  * verbose mode (-v)

And more! See the '-h' option for more.


A NOTE ON SENDING EMAILS

When PIUS emails out keys it BCC's you, so you will get a copy of every email
sent out. If you would like to see what is going to be sent and not have it
sent, you can either do:
  $ pius -T

To have PIUS dump the text of the default email body, or you can use the -n
option to forcefully override the TO in the envelope of the email. When doing
this *only* the address specified as an argument to -n will get the email.

LICENSE

PIUS is released under the GNU Public License v2 and is Copyright Phil Dibowitz
<phil@ipom.com>.

